laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", p, "`")), range = list(max(season_results_pivot[[col]]), min(season_results_pivot[[col]])))
}),
line = list(color = 'blue', reversed = TRUE))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")), range = list(max(season_results_pivot[[col]]), min(season_results_pivot[[col]])))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position"))
# Display the plot
plot
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position"))
# Display the plot
plot
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
season_results_pivot <- season_results %>%
pivot_wider(names_from = GP, values_from = position)
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
View(season_results_pivot)
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
season_results_pivot <- season_results %>%
pivot_wider(names_from = GP, values_from = position)
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", p, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue', reversed = TRUE))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Attributes"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = 'blue'))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = ~fullname))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
# Create the parallel coordinates plot with reversed lines
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(names(season_results_pivot)[-1], function(col) {
list(label = col, values = as.formula(paste0("~`", col, "`")))
}),
line = list(color = ~fullname))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
Convert factor columns to numeric
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Blues"))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
library(tidyr)
library(dplyr)
library(plotly)
pilots <- readr::read_csv("data/drivers.csv")
races <- readr::read_csv("data/races.csv")
results <- readr::read_csv("data/results.csv")
circuits <- readr::read_csv("data/circuits.csv")
laps <- readr::read_csv("data/lap_times.csv")
season_results <- results %>%
inner_join(races, by = "raceId") %>%
inner_join(pilots, by = "driverId") %>%
filter(year == 2022) %>%
mutate(fullname = paste(forename, surname, sep = " ")) %>%
arrange(date) %>%
select(GP=name, fullname, position) %>%
mutate(position = ifelse(position == "\\N", "DNF", position)) %>%
mutate(position = factor(position, levels = c(as.character(1:20), "DNF")))
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Blues"))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Set1"))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Set1"))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Blues"),
reversescale = TRUE)
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Blues"),
reversescale = TRUE)
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position"))
# Display the plot
plot
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Blues"),
)
# Convert factor columns to numeric
season_results_pivot <- season_results_pivot %>%
mutate(across(.cols = where(is.factor), .fns = as.numeric))
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = "Blues"),
)
# Extract the column names dynamically
column_names <- names(season_results_pivot)[-1]  # Exclude the "fullname" column
# Reverse the order of unique values in the fullname column
season_results_pivot$fullname <- factor(season_results_pivot$fullname, levels = rev(unique(season_results_pivot$fullname)))
# Create a custom color scale based on the reversed unique values in fullname
color_scale <- colorRampPalette(colors = c("blue", "red"))(length(unique(season_results_pivot$fullname)))
# Create the parallel coordinates plot with reversed lines and colored lines based on fullname
plot <- plot_ly(data = season_results_pivot, type = "parcoords",
dimensions = lapply(column_names, function(col) {
list(label = col, values = ~get(col))
}),
line = list(color = ~fullname, colors = color_scale))
# Customize the plot
plot <- plot %>% layout(title = "Formula 1 Driver Performance",
xaxis = list(title = "Grand Prix"),
yaxis = list(title = "Position", autorange = "reversed"))
# Display the plot
plot
runApp()
